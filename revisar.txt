Excelente ‚Äî ahora s√≠ tengo el panorama completo üîç.
Tu sistema actual con Gumroad + Firebase est√° muy bien estructurado: validaci√≥n segura, control de uso y un mecanismo de recuperaci√≥n de clave vinculado al correo de compra, lo cual es una gran idea.
Vamos a ver c√≥mo trasladar eso a Lemon Squeezy sin perder esa funcionalidad.

üß© 1. Qu√© est√°s haciendo actualmente

Basado en tus tres archivos:

verificar-clave.js ‚Üí valida la licencia (√∫nica, de un solo uso) en Firestore

verificar-clave

.

recuperar-clave.js ‚Üí revisa el correo en Firestore y en la API de Gumroad; si la suscripci√≥n est√° activa, genera una nueva clave y la guarda

recuperar-clave

.

status.js ‚Üí chequea modo mantenimiento, sin relaci√≥n directa con licencias

status

.

Tu flujo completo:

El usuario compra ‚Üí Gumroad env√≠a la licencia y guarda su correo.

Si el usuario pierde la licencia, puede recuperarla ingresando el mismo email que us√≥ en Gumroad.

Se valida en la API de Gumroad si su suscripci√≥n sigue activa.

Si est√° activa, generas una nueva clave en Firebase.

Perfecto.

‚öôÔ∏è 2. C√≥mo migrar esa l√≥gica a Lemon Squeezy

Lemon Squeezy ofrece una API similar, y pod√©s hacer exactamente lo mismo, solo que cambiando los endpoints.

üîπ API equivalente

Gumroad ‚Üí Lemon Squeezy:

Acci√≥n	Endpoint Gumroad	Endpoint Lemon Squeezy
Verificar licencia	/v2/licenses/verify	/v1/licenses/validate-key
Obtener suscripciones por email	/v2/products/:id/subscribers?email=	/v1/customers?filter[email]= + email
üìß 3. Recuperaci√≥n por email en Lemon Squeezy

S√≠, tambi√©n pod√©s hacerlo, pero con una peque√±a diferencia:
Lemon Squeezy no ofrece directamente una b√∫squeda ‚Äúpor producto y email‚Äù como Gumroad, sino por cliente o por orden.

Ejemplo con API p√∫blica:
const response = await fetch(`https://api.lemonsqueezy.com/v1/customers?filter[email]=${email}`, {
  headers: {
    'Authorization': `Bearer ${process.env.LEMON_API_KEY}`,
    'Accept': 'application/json'
  }
});
const data = await response.json();


El resultado te devuelve los clientes que compraron algo con ese correo.
Cada uno tiene un customer_id que pod√©s usar para listar sus √≥rdenes o licencias.

Luego consult√°s las licencias:

const licenses = await fetch(`https://api.lemonsqueezy.com/v1/licenses?filter[customer_id]=${customerId}`, {
  headers: {
    'Authorization': `Bearer ${process.env.LEMON_API_KEY}`,
    'Accept': 'application/json'
  }
});


Si existe una licencia activa, gener√°s una nueva (como ya hac√©s en recuperar-clave.js).

üîê 4. C√≥mo quedar√≠a tu recuperar-clave.js adaptado

Simplificado, ser√≠a algo as√≠:

async function verificarCompraLemon(email) {
  const API_KEY = process.env.LEMON_API_KEY;

  // Buscar cliente por email
  const resCliente = await fetch(`https://api.lemonsqueezy.com/v1/customers?filter[email]=${encodeURIComponent(email)}`, {
    headers: { 'Authorization': `Bearer ${API_KEY}`, 'Accept': 'application/json' }
  });
  const dataCliente = await resCliente.json();

  if (!dataCliente.data || dataCliente.data.length === 0)
    return { activa: false, message: 'No se encontr√≥ ninguna compra con ese correo.' };

  const customerId = dataCliente.data[0].id;

  // Verificar si hay una licencia activa
  const resLic = await fetch(`https://api.lemonsqueezy.com/v1/licenses?filter[customer_id]=${customerId}`, {
    headers: { 'Authorization': `Bearer ${API_KEY}`, 'Accept': 'application/json' }
  });
  const dataLic = await resLic.json();

  if (dataLic.data && dataLic.data.length > 0) {
    const lic = dataLic.data[0].attributes;
    if (lic.status === 'active') return { activa: true };
  }

  return { activa: false, message: 'No se encontr√≥ una licencia activa.' };
}


Y luego en tu handler mantendr√≠as igual la parte de:

generar nueva clave con uuidv4

guardar en Firestore

devolverla al usuario

‚úÖ 5. Ventajas adicionales con Lemon Squeezy

Puedes consultar todas las licencias y ver qui√©n las compr√≥.

Si el cliente cambia de dispositivo, puedes revocar o regenerar licencias directamente desde el panel.

Los clientes reciben autom√°ticamente un correo con su clave, sin necesidad de implementar env√≠os manuales.

üß† En resumen
Funci√≥n	Gumroad	Lemon Squeezy
Generar licencias	Autom√°tico	Autom√°tico (igual)
Validar licencias	/licenses/verify	/licenses/validate-key
Buscar por email	/subscribers?email=	/customers?filter[email]=
Reasignar o regenerar	Manual	Panel + API
API Key	GUMROAD_API_KEY	LEMON_API_KEY